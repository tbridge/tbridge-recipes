<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>Downloads NoMAD</string>
    
    <key>Identifier</key>
    <string>com.github.tbridge.munki.nomad</string>
    
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>NoMAD</string>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps/NoMAD</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>NoMAD is a helpful replacement for Active Directory bindings, using Kerberos and other resources to provide Active Directory services without a fragile binding plugin</string>
            <key>display_name</key>
            <string>NoMAD</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>unattended_install</key>
            <false/>
            <key>preinstall_script</key>
			<string>#!/bin/bash

# Pre-installation script for NoMAD
# Author : richard at richard - purves dot com
# Adapted for use with Munki by Tom Bridge - @tbridge on Mac Admins Slack

# The idea here is to clean up if an existing installation is present before installing the version in the pkg.

# Where is everything?
install_dir=$( /usr/bin/dirname $0 )

# Logging stuff starts here
LOGFOLDER="/private/var/log"
LOGFILE="${LOGFOLDER}/NoMAD-Preinstall.log"

if [ ! -d "$LOGFOLDER" ];
then
	/bin/mkdir "$LOGFOLDER"
fi

if [ ! -f "$LOGFILE" ];
then
	/usr/bin/touch ${LOGFILE}
fi

function logme()
{
# Check to see if function has been called correctly
	if [ -z "$1" ]; then
		/bin/echo "$(date '+%F %T') - logme function call error: no text passed to function! Please recheck code!"
		/bin/echo "$(date '+%F %T') - logme function call error: no text passed to function! Please recheck code!" &gt;&gt; ${LOGFILE}		
		exit 1
	fi

# Log the passed details
	/bin/echo "$(date '+%F %T') - $1"
	/bin/echo "$(date '+%F %T') - $1" &gt;&gt; ${LOGFILE}
}

# Start the preinstallation process.
logme "NoMAD Pre-Installation Script"

# Find if there's a console user or not. Blank return if not.
consoleuser=$(/usr/bin/python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')

logme "Detected console user: $consoleuser"
if [ -n "$consoleuser" ]; then
	# User present. We must be cautious.

	# Find if there's a launch agent present
	logme "Checking for LaunchAgent presence."
	laloc=$(/usr/bin/find /Library/LaunchAgents -maxdepth 1 -type f -iname "*nomad*.plist")
	if [ ! -z "$laloc" ];
	then
		# Kill the launch agent. No mercy.
		logme "Unloading NoMAD LaunchAgent at: $laloc"
		/usr/bin/sudo -iu "$consoleuser" launchctl unload "$laloc"
	else
		logme "NoMAD LaunchAgent not found. Proceeding."
	fi

	# Check to see if NoMAD is actually running
	# If NoMAD is running, kill NoMAD!
	logme "Checking for NoMAD PID."
	pid=$( /usr/bin/pgrep NoMAD )
	if [ ! -z "$pid" ];
	then
		logme "Killing NoMAD application running on PID: $pid"
		/bin/kill -9 $pid
	else
		logme "NoMAD application not running."
	fi
fi

# Check for the NoMAD app and delete if present
logme "Checking for NoMAD in /Applications"
apploc=$(/usr/bin/find /Applications -maxdepth 1 -type d -iname "*nomad*.app")

if [ -d "$apploc" ];
then
	logme "NoMAD found. Deleting."
	/bin/rm -rf "$apploc"
else
	logme "NoMAD not found."
fi

logme "Installation completed"</string>
		<key>postinstall_script</key>
			<string>#!/bin/bash

# Post-installation script for NoMAD
# Written by Johan McGwire - Yohan @ MacAdmins Slack - Johan@McGwire.tech
# Adapted for use with Munki by Tom Bridge - @tbridge on Mac Admins Slack

# This script re-boots the launch agent for NoMAD after Richard Purves's pre-install script
# Credit to Richard for the main bulk of the script

# Where is everything?
install_dir=$( /usr/bin/dirname $0 )

# Logging stuff starts here
LOGFOLDER="/private/var/log"
LOGFILE="${LOGFOLDER}/NoMAD-Postinstall.log"

if [ ! -d "$LOGFOLDER" ];
then
	/bin/mkdir "$LOGFOLDER"
fi

if [ ! -f "$LOGFILE" ];
then
	/usr/bin/touch ${LOGFILE}
fi

function logme()
{
# Check to see if function has been called correctly
	if [ -z "$1" ]; then
		/bin/echo "$(date '+%F %T') - logme function call error: no text passed to function! Please recheck code!"
		/bin/echo "$(date '+%F %T') - logme function call error: no text passed to function! Please recheck code!" &gt;&gt; ${LOGFILE}		
		exit 1
	fi

# Log the passed details
	/bin/echo "$(date '+%F %T') - $1"
	/bin/echo "$(date '+%F %T') - $1" &gt;&gt; ${LOGFILE}
}

# Start the preinstallation process.
logme "NoMAD Post-Installation Script"

# Find if there's a console user or not. Blank return if not.
consoleuser=$(/usr/bin/python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");')


# Find if there's a launch agent present
logme "Checking for LaunchAgent presence."
laloc="/Library/LaunchAgents/com.trusourcelabs.NoMAD.plist"
if [ -f "$laloc" ];
then
	# Restart the launch agent.
	logme "loading NoMAD LaunchAgent at: $laloc"
	/usr/bin/sudo -iu "$consoleuser" launchctl load "$laloc"
else
	logme "NoMAD LaunchAgent not found"
fi

logme "LaunchAgent restart completed"</string>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>0.4.0</string>
    <key>ParentRecipe</key>
    <string>com.github.tbridge.download.NoMAD</string>
    <key>Process</key>
        <array>
        <dict>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%pathname%</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
            </dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
        </dict>
    </array>
</dict>
</plist>